/**
 * @mixin flexible
 * @since 1.0.0
 */
 @mixin flexible($fg: 1, $fs: 0, $fb: auto) {
	@if $fg == none {
		flex: none;
	} @else if $fg == fill {
		flex: 1 0 auto;
	} @else if $fg == wrap {
		flex: 0 1 auto;
	} @else if $fg == both {
		flex: 1 1 auto;
	} @else {
		flex: $fg $fs $fb;
	}
}

/**
 * @mixin flex-box
 * @since 1.0.0
 */
@mixin flex-box($fg: null, $fs: 0, $fb: auto) {

	display: flex;

	@if $fg != null {
		@include flexible($fg, $fs, $fb);
	}
}

/**
 * @mixin flex-inl
 * @since 1.0.0
 */
@mixin flex-inl($fg: null, $fs: 0, $fb: auto) {

	display: inline-flex;

	@if $fg != null {
		@include flexible($fg, $fs, $fb);
	}
}


/**
 * @mixin flex-row
 * @since 1.0.0
 */
@mixin flex-row($v, $h, $mode: row, $wrap: false) {

	@if $mode == reverse {
		$mode: row-reverse;
	}

	flex-direction: $mode;

	@if $wrap {
		flex-wrap: wrap;
	}

	align-items:     $v;
	justify-content: $h;
}

/**
 * @mixin flex-col
 * @since 1.0.0
 */
@mixin flex-col($v, $h, $mode: column, $wrap: false) {

	@if $mode == reverse {
		$mode: column-reverse;
	}

	flex-direction: $mode;

	@if $wrap {
		flex-wrap: wrap;
	}

	align-items:     $h;
	justify-content: $v;
}

/**
 * @mixin mflex-set
 * @since 1.0.0
 */
@mixin flex-set($align) {
	align-self: $align;
}

/**
 * @mixin flex-ord
 * @since 1.0.0
 */
@mixin flex-ord($int: 0) {
	order: $int;
}

/**
 * @mixin flex-width
 * @since 1.0.0
 */
@mixin flex-width($min, $max, $class, $sub: null, $add: null) {

	@for $i from $min through $max {

		$width: ($i / $max) * 100%;

		&.#{$class}--#{$i} {

			@if $sub == null and $add == null {
				width: $width
			} @else if ($sub != null) {
				width: calc-sub($width, #{$sub});
			} @else if ($add != null) {
				width: calc-add($width, #{$add});
			}

			@include flexible(none);
		}
	}
}

/**
 * @mixin last-row
 * @since 1.0.0
 */
@mixin last-row($of) {
	&:nth-child(#{$of}n + 1):nth-last-child(-n + #{$of}),
	&:nth-child(#{$of}n + 1):nth-last-child(-n + #{$of}) ~ & {
   		@content;
	}
}